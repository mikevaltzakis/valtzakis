<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Valtzakis CNC Generator</title>
  <style>
    body { font-family: sans-serif; padding: 20px; max-width: 800px; margin: auto; }
    input, select, button, textarea { width: 100%; margin: 10px 0; padding: 8px; }
    canvas { border: 1px solid #000; margin-top: 10px; }
    .angle-btns button { width: 32%; margin-right: 2%; }
    .active { background: #0077cc; color: white; }
  </style>
</head>
<body>

<h2>üõ†Ô∏è Valtzakis CNC G-code Generator</h2>

<select id="shape" onchange="updateShapeUI()">
  <option value="rectangle">Rectangle</option>
  <option value="circle">Circle</option>
  <option value="keyhole">Keyhole</option>
</select>

<div id="rectangleInputs">
  <input type="number" id="width" placeholder="Width (mm)">
  <input type="number" id="height" placeholder="Height (mm)">
</div>

<div id="circleInputs" style="display:none;">
  <input type="number" id="radius" placeholder="Radius (mm)">
</div>

<div id="keyholeInputs" style="display:none;">
  <input type="number" id="kh_radius" placeholder="Head Radius (mm)">
  <input type="number" id="kh_length" placeholder="Shaft Length (mm)">
  <input type="number" id="kh_width" placeholder="Shaft Width (mm)">
  <input type="number" id="keyholeRotation" placeholder="Rotation (degrees)">
</div>

<select id="toolSelect">
  <option value="tool1">6mm End Mill</option>
  <option value="tool2">3mm Ball Nose</option>
  <option value="tool3">10mm End Mill</option>
</select>

<input type="text" id="passDepths" placeholder="Pass Depths (e.g. -2,-5,-8)">
<input type="number" id="centerX" placeholder="Center X (mm)">
<input type="number" id="centerY" placeholder="Center Y (mm)">

<select id="originMode">
  <option value="center">Center</option>
  <option value="bottom-left">Bottom-Left</option>
  <option value="top-left">Top-Left</option>
</select>

<div class="angle-btns">
  <button onclick="setAngle(90)">90¬∞</button>
  <button onclick="setAngle(180)">180¬∞</button>
  <button onclick="setAngle(270)">270¬∞</button>
</div>

<p>Work Offset: <span id="offsetDisplay">G55</span></p>
<p>Center of Shape: <span id="centerDisplay">X0 Y0</span></p>

<button onclick="generateGCode()">‚öôÔ∏è Generate G-code</button>
<button onclick="downloadGCode()">‚¨áÔ∏è Download .nc</button>

<textarea id="gcodeOutput" rows="10" placeholder="G-code will appear here..."></textarea>
<canvas id="preview" width="400" height="400"></canvas>
<script>
let currentAngle = 90;
let gcode = "";

const tools = {
  tool1: { diameter: 6, feedRate: 800, plungeRate: 300, safeZ: 5 },
  tool2: { diameter: 3, feedRate: 600, plungeRate: 200, safeZ: 5 },
  tool3: { diameter: 10, feedRate: 1200, plungeRate: 400, safeZ: 5 }
};

function setAngle(angle) {
  currentAngle = angle;
  document.querySelectorAll('.angle-btns button').forEach(btn => {
    btn.classList.remove('active');
    if (btn.textContent.includes(angle)) btn.classList.add('active');
  });
  document.getElementById("offsetDisplay").textContent = getWorkOffset(angle);
}

function getWorkOffset(angle) {
  if (angle === 180) return "G54";
  if (angle === 90) return "G55";
  if (angle === 270) return "G56";
  return "G54";
}

function updateShapeUI() {
  const shape = document.getElementById("shape").value;
  document.getElementById("rectangleInputs").style.display = shape === "rectangle" ? "block" : "none";
  document.getElementById("circleInputs").style.display = shape === "circle" ? "block" : "none";
  document.getElementById("keyholeInputs").style.display = shape === "keyhole" ? "block" : "none";
}

function generateGCode() {
  const shape = document.getElementById("shape").value;
  const passDepths = document.getElementById("passDepths").value.split(',').map(d => parseFloat(d.trim()));
  const tool = tools[document.getElementById("toolSelect").value];
  const safeZ = tool.safeZ;
  const feed = tool.feedRate;
  const plunge = tool.plungeRate;
  const cx = parseFloat(document.getElementById("centerX").value) || 0;
  const cy = parseFloat(document.getElementById("centerY").value) || 0;
  const originMode = document.getElementById("originMode").value;

  const workOffset = getWorkOffset(currentAngle);
  const angleCommand = `M${currentAngle}`;
  gcode = `${workOffset}\n${angleCommand}\nM200\nG21\nG90\nM3\nG0 Z${safeZ}\n`;

  let offsetX = 0, offsetY = 0;
  let centerX = cx, centerY = cy;

  passDepths.forEach(depth => {
    gcode += `G0 Z${safeZ}\nG0 X0 Y0\nG1 Z${depth} F${plunge}\n`;

    if (shape === "rectangle") {
      const w = parseFloat(document.getElementById("width").value);
      const h = parseFloat(document.getElementById("height").value);
      if (originMode === "center") {
        offsetX = cx - w / 2;
        offsetY = cy - h / 2;
      } else if (originMode === "top-left") {
        offsetX = cx;
        offsetY = cy - h;
      } else {
        offsetX = cx;
        offsetY = cy;
      }
      gcode += `G1 X${offsetX + w} Y${offsetY} F${feed}\n`;
      gcode += `G1 X${offsetX + w} Y${offsetY + h}\n`;
      gcode += `G1 X${offsetX} Y${offsetY + h}\n`;
      gcode += `G1 X${offsetX} Y${offsetY}\n`;

    } else if (shape === "circle") {
      const r = parseFloat(document.getElementById("radius").value);
      gcode += `G0 X${cx + r} Y${cy}\n`;
      gcode += `G2 X${cx + r} Y${cy} I-${r} J0 F${feed}\n`;

    } else if (shape === "keyhole") {
      const r = parseFloat(document.getElementById("kh_radius").value);
      const shaftLen = parseFloat(document.getElementById("kh_length").value);
      const shaftWidth = parseFloat(document.getElementById("kh_width").value);
      const rotationDeg = parseFloat(document.getElementById("keyholeRotation").value) || 0;
      const angleRad = rotationDeg * Math.PI / 180;

      function rotate(x, y) {
        const dx = x - cx;
        const dy = y - cy;
        const rx = dx * Math.cos(angleRad) - dy * Math.sin(angleRad);
        const ry = dx * Math.sin(angleRad) + dy * Math.cos(angleRad);
        return [cx + rx, cy + ry];
      }

      const [startX, startY] = rotate(cx + r, cy);
      gcode += `G0 X${startX.toFixed(3)} Y${startY.toFixed(3)}\n`;
      gcode += `G2 X${startX.toFixed(3)} Y${startY.toFixed(3)} I${(-r * Math.cos(angleRad)).toFixed(3)} J${(-r * Math.sin(angleRad)).toFixed(3)} F${feed}\n`;

      const shaftTopY = cy - r;
      const shaftBottomY = shaftTopY - shaftLen;
      const halfWidth = shaftWidth / 2;

      const corners = [
        [cx - halfWidth, shaftTopY],
        [cx - halfWidth, shaftBottomY],
        [cx + halfWidth, shaftBottomY],
        [cx + halfWidth, shaftTopY],
        [cx - halfWidth, shaftTopY]
      ];

      corners.forEach(([x, y]) => {
        const [rx, ry] = rotate(x, y);
        gcode += `G1 X${rx.toFixed(3)} Y${ry.toFixed(3)} F${feed}\n`;
      });
    }

    gcode += `G0 Z${safeZ}\n`;
  });

  gcode += `M200\nM5\nM30\n`;
  document.getElementById("gcodeOutput").value = gcode;
  document.getElementById("centerDisplay").textContent = `X${centerX} Y${centerY}`;
  drawPreview();
}
function drawPreview() {
  const canvas = document.getElementById("preview");
  const ctx = canvas.getContext("2d");
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.strokeStyle = "blue";
  const shape = document.getElementById("shape").value;
  const cx = 200;
  const cy = 200;

  if (shape === "rectangle") {
    const w = parseFloat(document.getElementById("width").value);
    const h = parseFloat(document.getElementById("height").value);
    ctx.strokeRect(cx - w / 2, cy - h / 2, w, h);

  } else if (shape === "circle") {
    const r = parseFloat(document.getElementById("radius").value);
    ctx.beginPath();
    ctx.arc(cx, cy, r, 0, 2 * Math.PI);
    ctx.stroke();

  } else if (shape === "keyhole") {
    const r = parseFloat(document.getElementById("kh_radius").value);
    const shaftLen = parseFloat(document.getElementById("kh_length").value);
    const shaftWidth = parseFloat(document.getElementById("kh_width").value);
    const rotationDeg = parseFloat(document.getElementById("keyholeRotation").value) || 0;
    const angleRad = rotationDeg * Math.PI / 180;

    function rotate(x, y) {
      const dx = x - cx;
      const dy = y - cy;
      const rx = dx * Math.cos(angleRad) - dy * Math.sin(angleRad);
      const ry = dx * Math.sin(angleRad) + dy * Math.cos(angleRad);
      return [cx + rx, cy + ry];
    }

    // Draw head
    ctx.beginPath();
    ctx.arc(cx, cy, r, 0, 2 * Math.PI);
    ctx.stroke();

    // Draw shaft
    const shaftTopY = cy - r;
    const shaftBottomY = shaftTopY - shaftLen;
    const halfWidth = shaftWidth / 2;

    const corners = [
      [cx - halfWidth, shaftTopY],
      [cx - halfWidth, shaftBottomY],
      [cx + halfWidth, shaftBottomY],
      [cx + halfWidth, shaftTopY],
      [cx - halfWidth, shaftTopY]
    ];

    ctx.beginPath();
    corners.forEach(([x, y], i) => {
      const [rx, ry] = rotate(x, y);
      if (i === 0) ctx.moveTo(rx, ry);
      else ctx.lineTo(rx, ry);
    });
    ctx.stroke();
  }
}

function downloadGCode() {
  const blob = new Blob([gcode], { type: 'text/plain' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = 'valtzakis_job.nc';
  link.click();
}
</script>
</body>
</html>
